/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package doc2html;

import java.io.*;
import java.util.concurrent.Callable;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMResult;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.poi.hwpf.HWPFDocumentCore;
import org.apache.poi.hwpf.converter.WordToHtmlConverter;
import org.apache.poi.hwpf.converter.WordToHtmlUtils;

import org.w3c.dom.Document;

import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;



@Command(description = "doc. file to html", name = "doc2html", mixinStandardHelpOptions = true, version = "v0.0.1")
public class Doc2HTML implements Callable<Integer> {

	@Option(names = { "-i", "--input" }, required = true, description = "input file.")
	File input;

	@Option(names = { "-o", "--output" }, description = "output file.")
	File output;

	public static String documentToString(Document d) {
		try {
			// Set up the output transformer
			TransformerFactory transfac = TransformerFactory.newInstance();
			Transformer trans = transfac.newTransformer();
			trans.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
			trans.setOutputProperty(OutputKeys.INDENT, "no");

			// Print the DOM node
			StringWriter sw = new StringWriter();
			StreamResult result = new StreamResult(sw);
			DOMSource source = new DOMSource(d.getDocumentElement());
			trans.transform(source, result);
			String xmlString = sw.toString();
			xmlString = xmlString.replaceAll(" xmlns=\"\"", ""); // ugly hack, should be avoidable...
			return xmlString;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public static void main(String[] args) throws Exception {
		int exitCode = new CommandLine(new Doc2HTML()).execute(args);
		System.exit(exitCode);

	}

	@Override
	public Integer call() throws Exception {
		try {
			HWPFDocumentCore wordDocument = WordToHtmlUtils.loadDoc(new FileInputStream(input));
			InlineImageWordToHtmlConverter converter = new InlineImageWordToHtmlConverter(
					DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument());

			converter.processDocument(wordDocument);
			Document htmlDocument = converter.getDocument();

			ByteArrayOutputStream out = new ByteArrayOutputStream();
			DOMSource domSource = new DOMSource(htmlDocument);
			DOMResult domResult = new DOMResult();

			TransformerFactory tf = TransformerFactory.newInstance();
			Transformer serializer = tf.newTransformer();

			serializer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
			serializer.setOutputProperty(OutputKeys.INDENT, "yes");
			serializer.setOutputProperty(OutputKeys.METHOD, "html");
			serializer.transform(domSource, domResult);

			out.close();

			Document doc = (Document) domResult.getNode();

			String result = Doc2HTML.documentToString(doc);
			if (output == null) {
				System.out.println(result);
			} else {
				FileWriter fw = new FileWriter(output);
				fw.write(result);
				fw.close();
			}
			return 0;
		} catch (Exception e) {
			e.printStackTrace();
			return 1;
		}
	}
}
