/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package doc2html;

import java.io.*;
import java.util.concurrent.Callable;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMResult;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.poi.hwpf.HWPFDocumentCore;
import org.apache.poi.hwpf.converter.PicturesManager;
import org.apache.poi.hwpf.converter.WordToHtmlConverter;
import org.apache.poi.hwpf.converter.WordToHtmlUtils;
import org.apache.poi.hwpf.usermodel.PictureType;

import org.w3c.dom.Document;

import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;
import picocli.CommandLine.Parameters;

import org.apache.batik.transcoder.*;
import org.apache.batik.transcoder.wmf.tosvg.*;



@Command(description = "doc. file to html", name = "doc2html", mixinStandardHelpOptions = true, version = "v0.0.2")
public class Doc2HTML implements Callable<Integer> {

	@Option(names = { "-i", "--input" }, description = "input file.")
	File input;

	@Option(names = { "-o", "--output" }, description = "output file.")
	File output;

	@Option(names = {
			"--images" }, defaultValue = "./images", description = "images directory. (default: ${DEFAULT-VALUE})")
	Path images;

	public static String documentToString(Document d) {
		try {
			// Set up the output transformer
			TransformerFactory transfac = TransformerFactory.newInstance();
			Transformer trans = transfac.newTransformer();
			trans.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
			trans.setOutputProperty(OutputKeys.INDENT, "no");

			// Print the DOM node
			StringWriter sw = new StringWriter();
			StreamResult result = new StreamResult(sw);
			DOMSource source = new DOMSource(d.getDocumentElement());
			trans.transform(source, result);
			String xmlString = sw.toString();
			xmlString = xmlString.replaceAll(" xmlns=\"\"", ""); // ugly hack, should be avoidable...
			return xmlString;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public static void main(String[] args) throws Exception {
		int exitCode = new CommandLine(new Doc2HTML()).execute(args);
		System.exit(exitCode);

	}

	@Override
	public Integer call() throws Exception {
		try {
			InputStream is;
			if (input != null) {
				is = new FileInputStream(input);
			} else {
				is = System.in;
			}
			Files.createDirectories(images);
			HWPFDocumentCore wordDocument = WordToHtmlUtils.loadDoc(is);
			WordToHtmlConverter converter = new WordToHtmlConverter(
					DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument());
			converter.setPicturesManager(new PicturesManager() {
				public String savePicture(byte[] content, PictureType pictureType, String suggestedName,
						float widthinches, float heightinches) {
					Path imgPath = Paths.get(images.getFileName().toString(), suggestedName);
					if (pictureType == PictureType.WMF) {
						// convert to jpeg
						imgPath = Paths.get(images.getFileName().toString(),
								com.google.common.io.Files.getNameWithoutExtension(suggestedName) + ".svg");
						try {
							TranscoderInput ti = new TranscoderInput(new ByteArrayInputStream(content));
							TranscoderOutput to = new TranscoderOutput(Files.newOutputStream(imgPath));
							WMFTranscoder transcoder = new WMFTranscoder();
							transcoder.transcode(ti, to);
						} catch (Exception e) {
							System.out.printf("failed to convert %s to svg\n", suggestedName);
							imgPath = Paths.get(images.getFileName().toString(), suggestedName);
							try {
								Files.write(imgPath, content);
							} catch (IOException io) {
								io.printStackTrace();
							}
						}
					} else {
						try {
							Files.write(imgPath, content);
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
					return imgPath.toString();
				}
			});
			converter.processDocument(wordDocument);
			Document htmlDocument = converter.getDocument();

			ByteArrayOutputStream out = new ByteArrayOutputStream();
			DOMSource domSource = new DOMSource(htmlDocument);
			DOMResult domResult = new DOMResult();

			TransformerFactory tf = TransformerFactory.newInstance();
			Transformer serializer = tf.newTransformer();

			serializer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
			serializer.setOutputProperty(OutputKeys.INDENT, "yes");
			serializer.setOutputProperty(OutputKeys.METHOD, "html");
			serializer.transform(domSource, domResult);

			out.close();

			Document doc = (Document) domResult.getNode();

			String result = Doc2HTML.documentToString(doc);
			if (output == null) {
				System.out.println(result);
			} else {
				FileWriter fw = new FileWriter(output);
				fw.write(result);
				fw.close();
			}
			return 0;
		} catch (Exception e) {
			e.printStackTrace();
			return 1;
		}
	}
}
